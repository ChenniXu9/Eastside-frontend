// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id
  username      String      @unique
  profile_image String?
  cover_image   String?
  first_name    String?
  last_name     String? 
  organization  String?
  title         String? 
  phone         String?  
  description   String?
  password      String?
  personal_email String?
  graduation_year String?
  work_email    String?
  admin          Boolean     @default(false)
  createdAt     DateTime @default(now())
  channels      UserToChannel[]
  posts         Post[]
  comments      Comment[]
  sentChannelRequests    ChannelRequest[] @relation("SentChannelRequests")
}

model Channel {
  id                  Int      @id @default(autoincrement())
  channel_name        String   @unique
  channel_image       String?
  channel_description String?
  users               UserToChannel[]
  posts               Post[]
  channelRequests     ChannelRequest[] @relation("ChannelRequests")
}

model Post {
  id          Int       @id @default(autoincrement())
  desc        String
  img         String?
  video       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  channel     Channel   @relation(fields: [channelId], references: [id])
  channelId   Int
  comments    Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
}

model UserToChannel {
  id          Int       @id  @default(autoincrement())
  createdAt DateTime @default(now())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  channel     Channel   @relation(fields: [channelId], references: [id])
  channelId   Int     
}

model ChannelRequest {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  sender      User     @relation("SentChannelRequests", fields: [senderId], references: [id], onDelete: Cascade)
  senderId    String
  channel     Channel  @relation("ChannelRequests", fields: [channelId], references: [id], onDelete: Cascade)
  channelId   Int
  status      String    @default("pending") // You can use 'pending', 'accepted', 'rejected'

  @@unique([senderId, channelId])
}

